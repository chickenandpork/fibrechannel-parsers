/* smallfoot.org is owned by allan.clark */
package org.smallfoot.dcnmsql;

//import java.io.*;
//import java.util.*;
//import javax.activation.DataSource;
//import javax.activation.URLDataSource;
//import gnu.getopt.Getopt;
//import gnu.getopt.LongOpt;
import org.smallfoot.parser.zone.BNAZoneParser;
import org.smallfoot.parser.zone.ZPAliasEntry;

/**
 * @file
 *
 * @see http://www.cisco.com/en/US/docs/switches/datacenter/sw/6_x/dcnm/installation/published/installing_DCNM.pdf
 * @see http://www.cisco.com/en/US/docs/switches/datacenter/nexus5000/sw/configuration/guide/fm/gs.pdf
 *
 * @section Known Issues
 * - as of 2012-09-11 unknown test status
 */

public class DCNMURLConnection extends java.net.URLConnection
{
    /**
     * PipedOutputStream to push out resultsets as CSV Nicknames.  No, I'm not a fan of this method of doing so, I'd rather have the upstream consume data block of WWN/Nickname pairs, but this fits into the stream-reading I've currently got.  TO be shallow, it fits the current dataflow, although very soon I'm sure there will be a need to strip off the layers of hand-offs and go with data blocks streaming form various resources.
     */
    class ResultCSVPipe extends java.io.PipedOutputStream implements Runnable
    {
        java.util.Vector<java.sql.ResultSet> sources;
        BNAZoneParser aszp;
        public ResultCSVPipe(java.sql.ResultSet source)
        {
            this(source, null);
        }
        public ResultCSVPipe(java.sql.ResultSet source, BNAZoneParser aszp)
        {
            this.sources = new java.util.Vector (1,1);
            this.add(source);
            this.aszp = aszp;
        }

        public void add(java.sql.ResultSet source)
        {
            sources.add(source);
        }

        public void run()
        {
for (java.sql.ResultSet source: sources)
                if (source != null)
                {
                    try
                    {
                        while (source.next())
                        {
                            String res = String.format("%s,\"%s\"\n",source.getString(1), source.getString(2));
                            write(res.getBytes(), 0, res.length());
                        }

                        source.close();
                    }
                    catch (java.sql.SQLException se)
                    {
                        System.err.println("SQLException: " + se.getMessage());
                        se.printStackTrace();
                    }
                    catch (java.io.IOException ioe)
                    {
                        System.err.println("IOException (@49) transferring data from database: " + ioe.getMessage());
                    }
                }

            if (null != aszp)
                try
                {
//System.out.println("parsed " + aszp.zoneSize() + " zones, " + aszp.aliasSize() + " aliases");
                    for (java.util.Enumeration<ZPAliasEntry> aliases = aszp.aliasElements(); aliases.hasMoreElements(); )
                    {
                        ZPAliasEntry alias = aliases.nextElement();

                        for (java.util.Iterator<String> wwns = alias.getWWNs(); wwns.hasNext(); )
                        {
                            String res = String.format("%s,\"%s\"\n",wwns.next(), alias.name());
//System.out.println("ASZP Alias: "+res);
                            write(res.getBytes(), 0, res.length());
                        }
                    }
                }
                catch (java.io.IOException ioe)
                {
                    System.err.println("IOException pasting bogus test content: " + ioe.getMessage());
                }
            aszp = null;

            try
            {
                close();
            }
            catch (java.io.IOException ioe)
            {
                System.err.println("IOException closing datapath from database: " + ioe.getMessage());
            }
        }
    }

    /**
     * PipedOutputStream to push out a single column of a resultset as a stream of resulting data.  More reinforcement of the layers discussed in ResultCSVPipe but maybe a bit closer to streams of datablocks?
     */
    class ResultSetPipe extends java.io.PipedOutputStream implements Runnable
    {
        java.sql.ResultSet source;
        int columnNumber;
        public ResultSetPipe(java.sql.ResultSet source, int columnNumber)
        {
            this.source = source;
            this.columnNumber = columnNumber;
        }

        public void run()
        {
            String _tee = System.getProperties().getProperty("dcnmsql.teeCSVPipe");
            java.io.FileOutputStream tee = null;
            try
            {
                if (null != _tee) tee = new java.io.FileOutputStream (_tee);
            }
            catch (java.io.FileNotFoundException fnfe)
            {
                System.err.println("FileNotFound: tee file "+_tee+" not found");
            }

            if (source != null)
            {
                try
                {
                    while (source.next())
                    {
                        if (null != source.getString(columnNumber))
                            write(source.getString(columnNumber).getBytes(), 0, source.getString(columnNumber).length());
//System.out.println("copied " + source.getString(columnNumber).length() + " bytes from result to stream: "+source.getString(columnNumber));
                        if (null != tee) tee.write(source.getString(columnNumber).getBytes(), 0, source.getString(columnNumber).length());
                    }

                    source.close();
                    if (null != tee) tee.close();
//System.out.println("result stream closed");
                }
                catch (java.sql.SQLException se)
                {
                    System.err.println("SQLException: " + se.getMessage());
                    se.printStackTrace();
                }
                catch (java.io.IOException ioe)
                {
                    System.err.println("IOException (@94) transferring data from database: " + ioe.getMessage());
                }
            }

            source = null;

            try
            {
                close();
            }
            catch (java.io.IOException ioe)
            {
                System.err.println("IOException closing datapath from database: " + ioe.getMessage());
            }
        }

        /**
         * @throw java.io.IOException when java.io.PipedInputStream.PipedInputStream(PipedOutputStream) throws an IOException "when an I/O error occurs" (thanks, guys)
         */
        public java.io.InputStream getInputStream() throws java.io.IOException
        {
            return new java.io.PipedInputStream(this);
        }
    }

    String connectionInfo = null;
    java.util.Properties properties = new java.util.Properties();
    java.sql.Connection connection;

    public DCNMURLConnection(String connectionInfo, String username, String password)
    {
        super(URLof(connectionInfo));
        this.connectionInfo = connectionInfo;
        properties.put("user",username);
        properties.put("password",password);
    }


    public DCNMURLConnection(java.net.URL url)
    {
        super(url);
//System.out.println("public DCNMURLConnection(java.net.URL "+url.toString()+")");
        //String ProgressStrocity = "jdbc.jdbcProgress:T:"+url.getHost()+":";
        // jdbc:postgresql://host:port/database
        String ProgressStrocity = "jdbc:postgresql://"+url.getHost()+":";

        if (-1 == url.getPort())
            ProgressStrocity += "5432";
        else
            ProgressStrocity += url.getPort();

        ProgressStrocity += "/dcnmdb";

        String user = null;
        String pass = null;
        if (null == url.getUserInfo())
        {
            user = "dcnmuser";
            pass = "password";
            //pass = "DCNMuser2010";	// http://www.itcertnotes.com/2011/08/changing-and-migrating-dcnm-and.html
            //user = "dcnmuser";
            //pass = "dcnmuser";
        }
        else
        {
//System.out.println("authority = \""+url.getUserInfo()+"\"");
            String[] a = url.getUserInfo().split(":");
            if (1 <= (java.lang.reflect.Array.getLength(a)))
                user = a[0];
            if (2 <= (java.lang.reflect.Array.getLength(a)))
                pass = a[1];
        }

        connectionInfo = ProgressStrocity;
        properties.put("user",user);
        properties.put("password",pass);
//System.out.println("fin: public DCNMURLConnection(java.net.URL "+url.toString()+")");
    }

    /**
     * Stubbed, because there's no change we want to accept yet.  Sorry, apparently "at this time" is more professional, if you listen to the wordy airport announcements.
     *
     * @param name ignored
     * @param value ignored
     */
    public void setRequestHeader(String name, String value) { }

    /**
     * Stubbed, because there's no change we want to accept yet.  Sorry, apparently "at this time" is more professional, if you listen to the wordy airport announcements.
     *
     * @param ignored ignored
     */
    public void setContentType(String ignored) { }

    /**
     * Stubbed, because there's nothing to send us.  Oh how did I get caught in the "Royal 'We'" ?
     */
    public java.io.OutputStream getOutputStream()
    {
        return null;
    }


    /**
     * connect the result of a "psql -c "select wwn,alias from device_alias"" to something that looks readable like an InputStream
     * may want to consider later (@see http://www.cisco.com/en/US/docs/switches/datacenter/mds9000/sw/6_x/technical/reference/DCNM-SAN_Published/db_tab.html)
     * - select e.wwn,z.name from end_port e, zone_member z where z.endport_id = e.id and z.type = 2;
     */
    public java.io.InputStream getInputStream()
    {
        if (null == connection)
            connect();

        /**
         * @sa http://www.cisco.com/c/en/us/td/docs/switches/datacenter/mds9000/sw/6_x/technical/reference/DCNM-SAN_Published/dbschema/db_tab.html#wp1319153
        */
        System.out.println("Now executing the command: "+ "SELECT wwn,alias FROM device_alias");
        System.out.println("Now executing the command: "+ "SELECT wwn,alias FROM end_port");
        System.out.println("NOT executing the command: "+ "SELECT f_wwn, np_wwn FROM npv_link");
        try
        {
            ResultCSVPipe res = new ResultCSVPipe( connection.createStatement().executeQuery("SELECT wwn,alias FROM device_alias WHERE alias IS NOT NULL"));
            res.add(connection.createStatement().executeQuery("SELECT wwn,alias FROM end_port WHERE alias IS NOT NULL"));
            new Thread(res).start();
            return new java.io.PipedInputStream(res);
        }
        catch (java.sql.SQLException se)
        {
            System.err.println("SQLException: " + se.getMessage());
            se.printStackTrace();
            return null;
        }
        catch (java.io.IOException ioe)
        {
            System.err.println("IOException joining database output to piped input: " + ioe.getMessage());
            return null;
        }
    }

    /**
     * openConnection(java.net.URL) overrides java.net.URLStreamHandler.openConnection(URL) by wrapping a pgsql client.
     *
     * @return populated connection as org.smallfoot.dcnmsql.DCNMURLConnection(Connection)
     * @param url URL to connect to
     */
    protected DCNMURLConnection openConnection(java.net.URL url)
    {
        return null;
    }

    static java.net.URL URLof(String connectionInfo)
    {
//System.out.println("static java.net.URL URLof(\""+connectionInfo+"\")");
        String con[] = connectionInfo.split(":");
        try
        {
//System.out.println("length of " + java.lang.reflect.Array.getLength(con));
            for (int i=0; i < java.lang.reflect.Array.getLength(con); i++) System.out.println("con["+i+"] is "+con[i]);
            return new java.net.URL("dcnmsql://" + con[3] + ":" + con[4] + "/" + con[5]);
        }
        catch (java.net.MalformedURLException mue)
        {
            return null;
        }
    }

    public void connect()
    {
//System.out.println("void connect(), connectionInfo=\""+connectionInfo+"\", user=\""+properties.get("user")+"\", password=\""+properties.get("password")+"\"");
        try
        {
            connection = java.sql.DriverManager.getConnection (connectionInfo, properties);
        }
        catch (java.sql.SQLException se)
        {
            String m = se.getMessage();
            if (m.startsWith("FATAL: no pg_hba.conf entry for host"))
                System.err.println("Connection error: " + se.getMessage() + "\n PLEASE add the client's IP address to the file C:\\Program Files\\Network Advisor 12.0.0\\data\\databases\\pg_hba.conf\ni.e: host   all   all  0.0.0.0/0  md5\n(no BNA restart is required)");
            else
            {
                System.err.println("Connection error: " + se.getMessage());
                se.printStackTrace();
            }
        }
    }
}
