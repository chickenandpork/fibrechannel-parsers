/* smallfoot.org is owned by allan.clark */
package org.smallfoot.osmsql;

/**
 * @file
 *
 * This class provides the connection infor to query the underlying OnCommand System Manager tables.  These are typically in a database called "dwh_inventory" (Data Warehouse), under userID "dwh", password "password".
 *
 * Testing of this data was done with an exported config database from jessigg called "dwh_inventory.sql" loaded using:
 *      /usr/local/mysql/bin/mysqladmin create dwh_inventory
 *      /usr/local/mysql/bin/mysql -u root mysql "grant connect on dwh_inventory.* to dwh identified by 'password'"
 *      /usr/local/mysql/bin/mysqladmin reload grant
 *      /usr/local/mysql/bin/mysql -u root dwh_inventory < ~/dwh_inventory.sql
 */

public class OSMURLConnection extends java.net.URLConnection
{
    /**
     * PipedOutputStream to push out resultsets as CSV Nicknames.  No, I'm not a fan of this method of doing so, I'd rather have the upstream consume data block of WWN/Nickname pairs, but this fits into the stream-reading I've currently got.  To be shallow, it fits the current dataflow, although very soon I'm sure there will be a need to strip off the layers of hand-offs and go with data blocks streaming from various resources.
     */
    class ResultCSVPipe extends java.io.PipedOutputStream implements Runnable
    {
        java.sql.ResultSet source;

        public ResultCSVPipe(java.sql.ResultSet source)
        {
            this.source = source;
        }

        public void run()
        {
            if (source != null)
            {
                try
                {
                    while (source.next())
                    {
                        String res = String.format("%s,\"%s\"\n",source.getString(1), source.getString(2));
                        write(res.getBytes(), 0, res.length());
                    }

                    source.close();
                }
                catch (java.sql.SQLException se)
                {
                    System.err.println("SQLException: " + se.getMessage());
                    se.printStackTrace();
                }
                catch (java.io.IOException ioe)
                {
                    System.err.println("IOException (@49) transferring data from database: " + ioe.getMessage());
                }
            }

            source = null;

            try
            {
                this.close();
            }
            catch (java.io.IOException ioe)
            {
                System.err.println("IOException closing datapath from database: " + ioe.getMessage());
            }
        }
    }


    String connectionInfo = null;
    java.util.Properties properties = new java.util.Properties();
    java.sql.Connection connection;

    public OSMURLConnection(String connectionInfo, String username, String password)
    {
        super(URLof(connectionInfo));
        this.connectionInfo = connectionInfo;
        properties.put("user",username);
        properties.put("password",password);
    }


    public OSMURLConnection(java.net.URL url)
    {
        super(url);
        String work = "jdbc:mysql://"+url.getHost()+":";

        if (-1 == url.getPort())
            work += "3306";
        else
            work += url.getPort();

        work += "/dwh_inventory";

        String user = null;
        String pass = null;
        if (null == url.getUserInfo())
        {
            user = "dwh";
            pass = "password";
        }
        else
        {
            String[] a = url.getUserInfo().split(":");
            if (1 <= (java.lang.reflect.Array.getLength(a)))
                user = a[0];
            if (2 <= (java.lang.reflect.Array.getLength(a)))
                pass = a[1];
        }

        connectionInfo = work;
        properties.put("user",user);
        properties.put("password",pass);
    }

    /**
     * Stubbed, because there's no change we want to accept yet.  Sorry, apparently "at this time" is more professional, if you listen to the wordy airport announcements.
     *
     * @param name ignored
     * @param value ignored
     */
    public void setRequestHeader(String name, String value) { }

    /**
     * Stubbed, because there's no change we want to accept yet.  Sorry, apparently "at this time" is more professional, if you listen to the wordy airport announcements.
     *
     * @param ignored ignored
     */
    public void setContentType(String ignored) { }

    /**
     * Stubbed, because there's nothing to send us.  Oh how did I get caught in the "Royal 'We'" ?
     */
    public java.io.OutputStream getOutputStream()
    {
        return null;
    }


    /**
     * connect the result of a "psql -c "select wwn,name from device_port_info"" to something that looks readable like an InputStream
     * - select port_wwn,name from hba_target_info;
     * - select port_nwwn,physical_port_nwwn,name from hba_port_details_info;
     */
    public java.io.InputStream getInputStream()
    {
        if (null == connection)
            connect();

        try
        {
            ResultCSVPipe res = new ResultCSVPipe( connection.createStatement().executeQuery("SELECT hp.wwn, h.name FROM host_port hp JOIN host h ON (h.id = hp.hostid)"));
            new Thread(res).start();
            return new java.io.PipedInputStream(res);
        }
        catch (java.sql.SQLException se)
        {
            System.err.println("SQLException: " + se.getMessage());
            se.printStackTrace();
            return null;
        }
        catch (java.io.IOException ioe)
        {
            System.err.println("IOException joining database output to piped input: " + ioe.getMessage());
            return null;
        }
    }

    /**
     * openConnection(java.net.URL) overrides java.net.URLStreamHandler.openConnection(URL) by wrapping a pgsql client.
     *
     * @return populated connection as org.smallfoot.osmsql.OSMURLConnection(Connection)
     * @param url URL to connect to
     */
    protected OSMURLConnection openConnection(java.net.URL url)
    {
        return null;
    }

    static java.net.URL URLof(String connectionInfo)
    {
        String con[] = connectionInfo.split(":");
        try
        {
            for (int i=0; i < java.lang.reflect.Array.getLength(con); i++) System.out.println("con["+i+"] is "+con[i]);
            return new java.net.URL("osmsql://" + con[3] + ":" + con[4] + "/" + con[5]);
        }
        catch (java.net.MalformedURLException mue)
        {
            return null;
        }
    }

    public void connect()
    {
        try
        {
            connection = java.sql.DriverManager.getConnection (connectionInfo, properties);
        }
        catch (java.sql.SQLException se)
        {
            String m = se.getMessage();
            System.err.println("Connection error: " + se.getMessage());
            se.printStackTrace();
        }
    }
}
