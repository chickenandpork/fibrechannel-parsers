package org.smallfoot.parser;

import gnu.getopt.Getopt;
import gnu.getopt.LongOpt;
import java.io.*;
import java.util.Vector;
import javax.activation.DataSource;
import javax.activation.URLDataSource;
import org.smallfoot.parser.ParserTee;
import org.smallfoot.parser.zone.AliShowZoneParser;
import org.smallfoot.parser.zone.Alias4Parser;
import org.smallfoot.parser.zone.BNAZoneParser;
import org.smallfoot.parser.zone.DeviceAliasParser;
import org.smallfoot.parser.zone.NicknameParser;
import org.smallfoot.parser.zone.ShowZoneParser;
import org.smallfoot.parser.zone.ShowZone2Parser;
import org.smallfoot.parser.zone.VW4InvalidAddedParser;
import org.smallfoot.parser.zone.ZPAliasEntry;
import org.smallfoot.parser.zone.ZoneParser;

/** @file */

/**
 * @page formats Compatible File Formats
 */



public abstract class FCParser
{
    /**
     * Produce an InputStream for the given uri in a way that corresponds to the url protocol
     *
     * @return InputStream ready to offer back the data
     * @param uri the file:// resource of a file, ie "file:///sample.csv"
     */
    public static java.io.InputStream openStream(String uri) throws java.io.FileNotFoundException, java.net.MalformedURLException, java.io.IOException
    {
        // http://www.roseindia.net/java/beginners/construct_file_name_path.shtml ?
        if (uri.toLowerCase().startsWith("file://"))
        {
            InputStream rr = new FileInputStream(uri.substring(7));
            return rr;
        }
        else   //if (uri.toLowerCase().startsWith("http://"))
        {
            DataSource ds = new URLDataSource(new java.net.URL(uri));

            if (false != Boolean.parseBoolean(System.getProperties().getProperty("debug.showURLOpener")))
                System.out.println("using discovered URL opener: DataSource open to "+uri);

            return ds.getInputStream();
        }
    }

    /**
     * Collect in a single place the process to register protocol handlers.
     *
     * This function checks for current protocol handlers and adds the ones we bring to that list.  If no "java.protocol.handler.pkgs" exists, we simply provide one.  System Properties are overwritten in this process.
     *
     * as the number of handlers increases, we can make corresponding changes herein without consuming projects having to know or care about this.
     *
     * The format of "java.protocol.handler.pkgs" is typically described in java.net.URL(String,String,int,String)
     * @see java.lang.System.setProperty(String,String)
     */
    public static void registerProtocols()
    {
        java.util.Properties p = System.getProperties();
        /*
                if ( (null == p.getProperty("jdbc.drivers")) || (1 > p.getProperty("jdbc.drivers").length()) )
                    p.setProperty("jdbc.drivers","org.postgresql|com.mysql.jdbc|com.sybase.jdbc4.jdbc.SybDriver");
                else
                    p.setProperty("jdbc.drivers",p.getProperty("jdbc.drivers")+"|org.postgresql|com.mysql.jdbc|com.sybase.jdbc4.jdbc.SybDriver");
        */

        if ( (null == p.getProperty("java.protocol.handler.pkgs")) || (1 > p.getProperty("java.protocol.handler.pkgs").length()) )
            p.setProperty("java.protocol.handler.pkgs","org.smallfoot.parser");
        else
            p.setProperty("java.protocol.handler.pkgs",p.getProperty("java.protocol.handler.pkgs")+"|org.smallfoot.parser");
        System.setProperties(p);

        //java.security.Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
    }



    /**
     * Create a stream from a URL or file name with a convenience workaround for no-proto URLs
     *
     * NOTE: changes java.util.Properties
     *
     * @return the resulting InputStream
     * @param url the resource to open
     * @param verbose whether to report errors to stdout or run quietly
     * @param prop Properties through which to pass post-URL options
     */
    public static InputStream openSource(String url, boolean verbose, java.util.Properties prop)
    {
        String[] params = url.split(";");
        int colWWN=0;
        int colNickname=1;

        for (int i = 1; i < params.length; i++)
        {
            String eq[] = params[i].split("=");
            if (eq.length > 1)
                prop.setProperty(eq[0].toLowerCase(),eq[1]);
        }

        java.io.InputStream is = null;
        try
        {
            is  = openStream(params[0]);
        }
        catch (Exception e)
        {
            /*
             * catch a MalformedURLException and check to see if any handler pkgs are registered
             *
             * This is done as a instanceof rather than a separate catch because we want to activate the same workaround anyhow
             */
            if (e instanceof java.net.MalformedURLException)
                if (e.getMessage().startsWith("unknown protocol: "))
                    if ( (null == System.getProperties().getProperty("java.protocol.handler.pkgs")) || (1 > System.getProperties().getProperty("java.protocol.handler.pkgs").length()) )
                        System.err.println("WARNING: no additional protocols registered: java.protocol.handler.pkgs is null (but still activating file:// fallback)");

            /*
             * In the case of a bad URL, we could check to see if there's a missing protocol or whatnot,
             * but hey, why not just try to read it?  I could do a lot of work to accommodate
             * Windows/DOS only, but then some change to the OS might come along.  Simply trying to
             * read it as an exception-handler might be the most straight-forward path here.
             */
            java.io.File nf = new File(params[0]);
            if (nf.canRead())
                try
                {
                    is = new FileInputStream(nf);
                }
                catch (java.io.FileNotFoundException fnfe)
                {
                    /* OK, workaround failed, but this shouldn't happen after a canRead() */
                    if (verbose) System.err.println("Failure to open "+params[0]+": " + e.getMessage() + " was followed by a File Not Found exception trying to open "+nf.getAbsolutePath()+" as a workaround");
                    return null;
                }
            else
            {
                /* OK, workaround failed.  Wap wap waaaaap */
                if (verbose) System.err.println("Failure to open "+params[0]+": " + e.getMessage());
                return null;
            }
        }

        return is;
    }

    /**
     * Load a file from the resource given to a WWN/Nickname vector
     *
     * @return the number of things loaded (used to trigger obsessive retries to get around choking org.apache.commons.io.input.TeeInputStream )
     * @param is the inputstream to parse from
     * @param args0 the args[0] value to substitute into the optional verbose output of oarsing results
     * @param verbose if true, parser results will be shown to stdout
     * @param prop Properties through which to pass post-URL options
     */
    public static ZoneParser loadFile(InputStream is, String args0, boolean verbose, java.util.Properties prop)
    {
        if (null == is) return null;
        Vector<ZoneParser> zpl = new Vector();

        /* tried 2013-04-23 with 18 ParserTees feeding a NicknameParser, a AliShowZoneParser, and 16 Alias4Parsers */
        /* tried 2013-04-23 with 17 ParserTees feeding a NicknameParser, 2 AliShowZoneParser, and 14 Alias4Parsers */
        zpl.add( new NicknameParser(prop));
        zpl.add( new AliShowZoneParser(prop));
        zpl.add( new Alias4Parser(prop));

        zpl.add( new BNAZoneParser(prop));
        zpl.add( new DeviceAliasParser(prop));
        zpl.add( new ShowZoneParser(prop));
        zpl.add( new ShowZone2Parser(prop));
        zpl.add( new VW4InvalidAddedParser(prop));

        try
        {
            for (ZoneParser zp:zpl)
                is = new ParserTee (is, zp);
        }
        catch (java.io.IOException ioe)
        {
            if (verbose) System.err.println("Failure to seam a pipe when parsing: " + ioe.getMessage());
            return null;
        }

        /*
         * It would be more elegant to hold one of the ZoneParsers, and to cap it onto the end of
         * the ParserTee pipe, but there's a certain simplicity in merely draining the pipe herein
         * to cause the dupes to all run.  It's a bit wasteful, but works, and makes the code
         * above lack any exceptions that can be difficult to explain.
         */
        BufferedReader br = new BufferedReader(new InputStreamReader(is));

        //read each line of text file
        try
        {
            while (-1 < br.read()) ;
        }
        catch (java.io.IOException ioe)
        {
            if (verbose) System.out.println("I/O Error: " + ioe.getMessage());
        }

        /*
         * OK, the entire pipe is drained, but we need to close it to signal that the stream ends
         * to all the Tees
         */
        try
        {
            br.close();
        }
        catch (java.io.IOException ioe)
        {
            if (verbose) System.out.println("I/O Error: " + ioe.getMessage());
        }

        /*
         * Now that it's closed, we may need to give some thread-time to each parser to get them
         * to finish parsing the stream
         */
        for (ZoneParser zp:zpl)
            try
            {
                if (java.lang.Thread.State.TERMINATED != zp.getState())
                    zp.join (10);

                for (int i = 10; i > 0 && java.lang.Thread.State.TERMINATED != zp.getState() ; i--)
                {
                    if (verbose) System.out.println("waiting for parser to drain: "+i+" "+zp.getClass().getName());
                    zp.join (100);
                }
            }
            catch (java.lang.InterruptedException ie) {}

        /*
         * Great, we have a closed stream, only read once, and we have Parsers all loaded up with content.
         *
         * Shall we tally-the-votes to see who wins?
         */

        ZoneParser winningzp = null;
        for (ZoneParser zp:zpl)
        {
            if (verbose)
                System.out.println("("+(null == args0 ? "@PACKAGE@" : ("" == args0 ? "@PACKAGE@" : args0))+") parsed " + zp.zoneSize() + " zones, " + zp.aliasSize() + " aliases via "+zp.getClass().getName().replaceAll(".*\\.",""));

            if (null == winningzp)
                winningzp = zp;
            else if (zp.aliasSize() > winningzp.aliasSize())
                winningzp = zp;
            else if (zp.zoneSize() > winningzp.zoneSize())
                winningzp = zp;
        }

        return winningzp;
    }

    /**
     * Usage messages are useful to those of us with short memories as well (hey, I just need to add swap!)
     *
     * @param progname the name of the program (args[0]) to print on a usage message
     */
    static void usage(String progname)
    {
        System.out.println("Usage: "+progname+" -V|--version|-H|--help");
        System.out.println("     : "+progname+" --read <filename>|--input <filename> | -r <filename> | -i <filename>");

        System.out.println("   ie: "+progname+" --read import.json");
        System.out.println("   ie: "+progname+" -r import.json");

        System.out.println("drivers: "+System.getProperties().getProperty("jdbc.drivers"));
        System.out.println("handlers: "+System.getProperties().getProperty("java.protocol.handler.pkgs"));
    }



    /**
     * Main function, as you can tell.
     *
     * this function merely parses the command-line to dispatch actions to the meat of the meal above.
     * I'm using an actual GetOpt because, yes, I'm a UNIX/C hack, re-using 3-decades-old knowledge,
     * but this also preserves both extensibility and the ability to use longopts in scripts as a
     * way to self-document what the tool's doing.
     *
     * No real intelligence herein except the parse-and-redirect action.
     *
     * @param args as you'd expect, these are commandline arguments given when the jar is activated
     */
    public static void main(String args[])
    {
        Vector<LongOpt> options = new Vector(3,2);
        java.util.Properties prop = System.getProperties();

        /**
             * Always always ALWAYS provide a quick reference and a version output
         *
         * @cmdopt -H|--help Show a simple help screen as a reminder of options which are understood by the application
         * @cmdopt @code java -jar @PACKAGE@.jar --help @endcode
         *
         * @cmdopt -V|--version Show the current release version for reference
         * @cmdopt @code java -jar @PACKAGE@.jar --version
         *  @VERSION@-@BUILDID@ @endcode
         *
         * @cmdopt -N|--nickname={file/uri} Import nicknames by parsing a text stream from various sources
         * @cmdopt @code java -jar @PACKAGE@.jar --nickname=switch44.zoneshow
         * Parse results for AliShowZoneParser:
         * Zones: 44
         * Aliases: 112 (names with one or more WWPNs)
         * Aliases: 136 (name/WWPN tuples) @endcode
         * In this example, a zone file was parsed by the AliShowZoneParser resulting in 112
             * nicknames; due to duplicate nicknames, there are actually 136 unique WWPN/alias
             * tuples, which means that (136-112) 24 of the WWPNs have the same alias as other
             * WWPNs
         *
         * @cmdopt -!|--check Run an internal check that dependent drivers are available and registered
         */
        options.add(new LongOpt("help", LongOpt.NO_ARGUMENT, null, 'H'));
        options.add(new LongOpt("version", LongOpt.NO_ARGUMENT, null, 'V'));

        options.add(new LongOpt("check", LongOpt.NO_ARGUMENT, null, '!'));

        options.add(new LongOpt("nickname", LongOpt.REQUIRED_ARGUMENT, null, 'N'));

        /*
         * NOTE: the following two pieces of code react to a choice at compile-time to
         * use extended getopt; only one of the next two likes is visible at the same
         * time
         */
        /* *@DO_GETOPTJAR_TRUE@/        org.smallfoot.getopt.GetOpt     g = new org.smallfoot.getopt.GetOpt("fcparser", args, options);        /@DO_GETOPTJAR_TRUE@* */
        /* *@DO_GETOPTJAR_FALSE@/       gnu.getopt.Getopt               g = new gnu.getopt.Getopt("fcparser", args, "HVN:", options);        /@DO_GETOPTJAR_FALSE@* */

        FCParser.registerProtocols();

        int c;
        while ((c = g.getopt()) != -1)
        {
            switch (c)
            {
            case 'N': /* input Nicknames using file:, ftp:, http: via fibrechannel-parsers fcparsers.jar */
                ZoneParser aszp = FCParser.loadFile(FCParser.openSource(args[1], false, prop), null, /* verbose */ false, prop);
                if (null != aszp) aszp.summarize();
                break;

            /*
             * Follows is the "house-keeping": versions, usage, and the catch-all for bad options.
             */
            case 'V':
            {
                /*
                 * NOTE: the following two pieces of code react as do the instantation of variable "g" above
                 */

                /* *@DO_GETOPTJAR_TRUE@/	System.out.println(g.consistentVersion("@VERSION@-@BUILDID@"));	/@DO_GETOPTJAR_TRUE@* */
                /* *@DO_GETOPTJAR_FALSE@/	System.out.println("@VERSION@-@BUILDID@");			/@DO_GETOPTJAR_FALSE@* */
                return;
            }

            case '!':   // check that external driver munginess loads
                for (String s: "jdbc.drivers,java.protocol.handler.pkgs".split(","))
                    System.out.println("property " + s + " is " + prop.getProperty(s));

                try
                {
                    //Class.forName("com.progress.sql.jdbc.JdbcProgressDriver");
                    Class.forName("org.postgresql.Driver");
                    System.out.println("BNAPSQL DB Driver: OK");
                }
                catch (java.lang.ClassNotFoundException cnfe)
                {
                    System.out.println("BNAPSQL DB Driver: ERR : "+cnfe.getMessage());
                }

		try {
		    Class.forName("org.smallfoot.parser.bna.Handler"); System.out.println("BNA Protocol Handler: OK");
		} catch (java.lang.ClassNotFoundException cnfe) {
		    System.out.println("BNA Protocol Handler: ERR : "+cnfe.getMessage());
		}
		try {
		    Class.forName("org.smallfoot.parser.bnapsql.Handler"); System.out.println("BNA(PSQL) Protocol Handler: OK");
		} catch (java.lang.ClassNotFoundException cnfe) {
		    System.out.println("BNA(PSQL) Protocol Handler: ERR : "+cnfe.getMessage());
		}
		try {
		    Class.forName("org.smallfoot.parser.cmcne.Handler"); System.out.println("BNA(CMCNE) Protocol Handler: OK");
		} catch (java.lang.ClassNotFoundException cnfe) {
		    System.out.println("BNA(CMCNE) Protocol Handler: ERR : "+cnfe.getMessage());
		}
		try {
		    Class.forName("org.smallfoot.parser.dcfm.Handler"); System.out.println("BNA(DCFM) Protocol Handler: OK");
		} catch (java.lang.ClassNotFoundException cnfe) {
		    System.out.println("BNA(DCFM) Protocol Handler: ERR : "+cnfe.getMessage());
		}
                try
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    System.out.println("OSMSQL DB Driver: OK");
                }
                catch (java.lang.ClassNotFoundException cnfe)
                {
                    System.out.println("OSMSQL DB Driver: ERR : "+cnfe.getMessage());
                }

		try {
		    Class.forName("org.smallfoot.parser.msosmsql.Handler"); System.out.println("(MS)OSMSQL Protocol Handler: OK");
		} catch (java.lang.ClassNotFoundException cnfe) {
		    System.out.println("(MS)OSMSQL Protocol Handler: ERR : "+cnfe.getMessage());
		}
		try {
		    Class.forName("org.smallfoot.parser.ocidwh.Handler"); System.out.println("OCI(DWH) Protocol Handler: OK");
		} catch (java.lang.ClassNotFoundException cnfe) {
		    System.out.println("OCI(DWH) Protocol Handler: ERR : "+cnfe.getMessage());
		}
		try {
		    Class.forName("org.smallfoot.parser.osmsql.Handler"); System.out.println("OCI(OSMSQL) Protocol Handler: OK");
		} catch (java.lang.ClassNotFoundException cnfe) {
		    System.out.println("OCI(OSMSQL) Protocol Handler: ERR : "+cnfe.getMessage());
		}

		try {
		    Class.forName("org.smallfoot.parser.dcnm.Handler"); System.out.println("DCNM Protocol Handler: OK");
		} catch (java.lang.ClassNotFoundException cnfe) {
		    System.out.println("DCNM Protocol Handler: ERR : "+cnfe.getMessage());
		}
		try {
		    Class.forName("org.smallfoot.parser.dcnmsql.Handler"); System.out.println("DCNM(SQL) Protocol Handler: OK");
		} catch (java.lang.ClassNotFoundException cnfe) {
		    System.out.println("DCNM(SQL) Protocol Handler: ERR : "+cnfe.getMessage());
		}
                break;

            default:
            case '?':
            case 'H':
                /* *@DO_GETOPTJAR_TRUE@/	FCParser.usage(g.progname());			/@DO_GETOPTJAR_TRUE@* */
                /* *@DO_GETOPTJAR_FALSE@/	FCParser.usage("fcparser");			/@DO_GETOPTJAR_FALSE@* */
                break;
            }
        }

    }

}

