/* http://byaccj.sourceforge.net */
%{
import java.lang.Math;
//import java.util.StringTokenizer;
import java.io.*;
%}

/* YACC Declarations */
%token TOK01 1	/* zone start */
%token TOK02 2	/* zone entry */
%token TOK03 3	/* nickname: alias WWN */
%token TOK05 5	/* 1048576 end-of-cell */
%token TOK07 7	/* matches a 0x01 value */
%token ALPHANUM

/* Grammar follows */
%%
input:  /* empty string */
 | input TOK07 ALPHANUM ALPHANUM
 | input TOK05 ALPHANUM
 | input TOK03 ALPHANUM ALPHANUM { addAlias ($3, $4); }
 | input TOK03 ALPHANUM itemlist { addAlias ($3, $4); }
 | input TOK02 ALPHANUM itemlist 
 | input TOK01 ALPHANUM itemlist
 ;

itemlist: ALPHANUM { $$ = $1; }
 | itemlist ALPHANUM { $$ = appendZoneAlphanum($1, $2); }
 | itemlist ';' { $$ = $1 ; }
 ;

%%

    String ins;
    java.io.StreamTokenizer st;
    boolean zpquiet = true;

    void yyerror(String s)
    {
        if (!zpquiet) System.out.println("parser error: "+s);
    }

    boolean verboseStringtokenizer = checkProperty("debug.verboseTokenizer");
    boolean newline;
    String manualPushBackALPHANUM = null;

    int yylex()
    {
        String s;
        int tok;
        Double d;
//System.out.print("yylex ");
	if (null != manualPushBackALPHANUM)
	{
	    st.sval = manualPushBackALPHANUM;
	    //if (verboseStringtokenizer) System.out.println("token#: "+java.io.StreamTokenizer.TT_WORD);
	    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:ALPHANUM \"" + st.sval + "\"");
	    manualPushBackALPHANUM = null;
	    return ALPHANUM;
	}
	/* else */

	try {
        tok = st.nextToken();
	} catch (java.io.IOException ioe) { if (verboseStringtokenizer) System.out.println("I/O Exception so returning from parser"); return 0; }
	if (verboseStringtokenizer) System.out.println("(@75) token#: "+tok);
	switch(tok)
	{
	    case java.io.StreamTokenizer.TT_EOF:
                return 0;
	
	    case java.io.StreamTokenizer.TT_EOL:
		if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_EOL");
                newline=true;
		return '\n';

	    case TOK01:
	    case TOK02:
	    case TOK03:
	    case TOK05:
	    case TOK07:
/*
		if (!newline)
		{
                    newline=true;
                    st.pushBack();
                    return '\n'; //So we look like classic YACC example
                }
*/
		if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.delimiter: \"" + (char)(tok+'0') + "\"");
                newline=false;
		return tok;

	    case java.io.StreamTokenizer.TT_WORD:
		if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:ALPHANUM \"" + st.sval + "\"");
                newline=false;
		yylval = new ZoneParserVal(st.sval);
		return ALPHANUM;

	    case java.io.StreamTokenizer.TT_NUMBER:
	        if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_NUMBER \"" + st.sval + "\" as \"" + st.nval + "\"");
                newline=false;
		yylval = new ZoneParserVal(st.nval);
		return ALPHANUM;

            case ';':
                if (verboseStringtokenizer) System.out.println("returning anticipated char "+ tok + " \"" + (char) tok + "\"");
                newline=false;
                return tok;
	}

	// bogusity
	if (verboseStringtokenizer) System.out.println("returning bogus char "+ tok + " \"" + (char) tok + "\"");
	return '\n';
    }


public void parse()
{
 try
 {
 yyparse();
 }
 catch (Exception e)
 {
 }
}


public void setReader(Reader in)
{
  //nothing to do
 st = new java.io.StreamTokenizer(in);
 // reset the parser to effect a parseNumbers(false) which doesn't exist
 st.resetSyntax();
 st.wordChars('a', 'z');
 st.wordChars('A', 'Z');
 //st.wordChars(128 + 32, 255);
 st.ordinaryChars((int) 1, (int) 7);
 st.whitespaceChars(8, ' ');

 // ok, dots, numbers, things accepted as WWNs or names are generally "words"
 st.wordChars((int) '.', (int) '.');
 st.wordChars((int) '0', (int) '0');
 st.wordChars((int) '1', (int) '9');
 st.wordChars((int) ':', (int) ':');
 st.wordChars((int) '_', (int) '_');

 // It's ordinary, and returned so that we can use as a separator.  Later, it's possible to just treat as a separator to be a bit more accepting of "xxx xxx xxx" as "xxx; xxx; xxx"
 st.ordinaryChar((int) ';');

 st.eolIsSignificant(false);

 newline=false;
}


public void run()
{
  if (0 != yyparse())
    try
    {
	/* if the parse is incomplete, drain the channel */
	while (java.io.StreamTokenizer.TT_EOF != st.nextToken()) ;
    }
    catch (IOException e) { debug(getClass().getName()+" I.O Error: "+e.getMessage()); }
}


public void setDebug(boolean debug) { yydebug=debug; }
public BNAZoneParser(InputStream in, boolean debugMe) { super(in, debugMe); }
public BNAZoneParser(InputStream in) { super(in); }
public BNAZoneParser(java.util.Properties in, boolean debugMe) { super(in, debugMe); }


public static void main(String args[])
{
 BNAZoneParser aszp = new BNAZoneParser(System.in, false);
 aszp.parse();
 System.out.println("bnazone (main) parsed " + aszp.zoneSize() + " zones, " + aszp.aliasSize() + " aliases");
}
