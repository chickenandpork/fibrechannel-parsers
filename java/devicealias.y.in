%{
import java.lang.Math;
import java.io.*;

/**
 * @page formats Compatible File Formats
 * @subpage DeviceAliasParser
 *
 * @page DeviceAliasParser Cisco "show device-alias database"
 *
 * The DeviceAliasParser parses the output of a Cisco SAN switch with the "show device-alias database" command
 *
 * As always, this parser is more successful when the content is treated like
 * binary: don't edit it.  In particular, the use of a putty log to capture output
 * while querying the switch leads to parser exceptions because the interactive
 * "you have connected to blah blah system version 1.2.3, the weather is fabulous
 * and I have 42 pages of boilerplate to spit out before you enter the command for
 * aliases... hit enter to continue... have some backspaces..." is included.  As
 * are the backspaces.
 *
 * When collecting aliases using an ssh command, it's better to execute that command noninteractively:
 *
 * In UNIX, Linux, Ubuntu, OSX, or the 6000 other licensees of the USL codebase:
 *
 *     ssh username@switch44.example.com "show device-alias database" > switch44.dad
 *
 * In windows, using the <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">putty</a> tools:
 *
 *     plink.exe -l username -pw p4ssw0rd switch44.example.com "show device-alias database" > switch44.dad
 *
 * This leads to a better chance to parse 100% of the output with more accuracy,
 * but I guess following this recommendation is up to the user, and to the engineer
 * suggesting how he or she should collect the text for parsing.
 *
 * @verbatim
The copyrights to certain works contained in this software are
owned by other third parties and used and distributed under
license. Certain components of this software are licensed under
the GNU General Public License (GPL) version 2.0 or the GNU
Lesser General Public License (LGPL) Version 2.1. A copy of each
such license is available at
http://www.opensource.org/licenses/gpl-2.0.php and
http://www.opensource.org/licenses/lgpl-2.1.php
switch44a# show device-alias database
device-alias name server44_hba0 pwwn 10:00:00:00:c9:12:34:56
device-alias name server44_hba1 pwwn 10:00:00:00:c9:12:34:57
device-alias name oracle10_hba0 pwwn 21:00:00:24:ff:12:34:56
device-alias name oracle10_hba1 pwwn 22:00:00:24:ff:12:34:56
device-alias name vmax-18641-fa06a0 pwwn 50:00:09:72:01:23:45:54
device-alias name vmax-18641-fa07a0 pwwn 50:00:09:72:01:23:45:58 @endverbatim
 *
 * with the following result of WWPN/alias pairs:
 * @verbatim
10000000c9123456,"server44_hba0"
10000000c9123457,"server44_hba1"
21000024ff123456,"oracle10_hba0"
22000024ff123456,"oracle10_hba1"
5000097201234554,"vmax-18641-fa06a0"
5000097201234558,"vmax-18641-fa07a0" @endverbatim
 */

%}

/* YACC Declarations */
%token DEVICEALIAS
%token NAME
%token PWWN
%token ALPHANUM
%token PRE_SHOW
%token PRE_DATABASE

/* Grammar follows */
%%
file: skippreamble input ;

input: /* empty string */
 | input '\n'
 | input effectiveLine
 ;

lineContent: /* empty */
 | ALPHANUM lineContent { $$ = $2; }
 | lineContent ALPHANUM
 | lineContent effectiveLine
 ;

skippreamble: /* empty */
 | skippreamble ALPHANUM
 | skippreamble ALPHANUM PRE_SHOW DEVICEALIAS PRE_DATABASE
 ;

/*
 * device-alias name TESTSERVER0_0a pwwn 10:00:00:00:c9:12:34:56
 * device-alias name TESTSERVER1_0a pwwn 10:00:00:00:c9:12:34:57
 * device-alias name TESTSERVER2_0a pwwn 10:00:00:00:c9:12:34:58
 * device-alias name TESTSERVER0_0c pwwn 10:00:00:00:c9:12:34:59
 */

effectiveLine: DEVICEALIAS NAME ALPHANUM PWWN ALPHANUM { addAlias ($3, $5); }
 ;

%%

    String ins;
    java.io.StreamTokenizer st;
    boolean zpquiet = true;

    void yyerror(String s)
    {
        if (!zpquiet) System.out.println("parser error: "+s);
    }

    boolean verboseStringtokenizer = checkProperty("debug.verboseTokenizer");
    boolean newline = true;

    int yylex()
    {
        String s;
        int tok;
        Double d;

	try {
        tok = st.nextToken();
	} catch (java.io.IOException ioe) { return 0; }
	if (verboseStringtokenizer) System.out.println("token#: "+tok+": status: "+st.toString());
	switch(tok)
	{
	    case java.io.StreamTokenizer.TT_EOF:
//System.out.println("returning java.io.StreamTokenizer.TT_EOF");
            if (!newline)
            {
                newline=true;
		st.pushBack();
		if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_EOL in lieu of TT_EOF");
                return '\n'; //So we look like classic YACC example
            }
            else
                return 0;
	
	    case java.io.StreamTokenizer.TT_EOL:
		if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_EOL");
                newline=true;
		return '\n';

	    case java.io.StreamTokenizer.TT_WORD:
	        if (st.sval.equalsIgnoreCase("device-alias"))
		{
		    if (!newline)
		    {
			newline=true;
			st.pushBack();
		        if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_EOL in lieu of TT_WORD:DEVICEALIAS \"" + st.sval + "\"");
			return '\n';
		    }
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:DEVICEALIAS \"" + st.sval + "\"");
		    return DEVICEALIAS;
		}
	        else if (st.sval.equalsIgnoreCase("name"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:NAME \"" + st.sval + "\"");
		    return NAME;
		}
	        else if (st.sval.equalsIgnoreCase("pwwn"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:PWWN \"" + st.sval + "\"");
		    return PWWN;
		}
	        else if (st.sval.equalsIgnoreCase("show"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:PRE_SHOW \"" + st.sval + "\"");
		    return PRE_SHOW;
		}
	        else if (st.sval.equalsIgnoreCase("database"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:PRE_DATABASE \"" + st.sval + "\"");
		    return PRE_DATABASE;
		}
		if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:ALPHANUM \"" + st.sval + "\"");
		yylval = new ZoneParserVal(st.sval);
		return ALPHANUM;

	    case java.io.StreamTokenizer.TT_NUMBER:
	        if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_NUMBER \"" + st.sval + "\" as \"" + st.nval + "\"");
		yylval = new ZoneParserVal(st.nval);
		return ALPHANUM;

	    case ':':
	    case ';':
	        if (verboseStringtokenizer) System.out.println("returning anticipated char "+ tok + " \"" + (char) tok + "\"");
		return tok;
	}

	// bogusity
	if (verboseStringtokenizer) System.out.println("returning bogus char "+ tok + " \"" + (char) tok + "\"");
	return '\n';
    }


public void parse()
{
 try
 {
 yyparse();
 }
 catch (Exception e)
 {
 }
}


public void setReader(Reader in)
{
  //nothing to do
 st = new java.io.StreamTokenizer(in);
 // reset the parser to effect a parseNumbers(false) which doesn't exist
 st.resetSyntax();
 st.wordChars('a', 'z');
 st.wordChars('A', 'Z');
 st.wordChars(128 + 32, 255);
 st.whitespaceChars(0, ' ');
 st.commentChar('/');
 st.quoteChar('"');
 st.quoteChar('\'');

 // ok, dots, numbers, things accepted as WWNs or names are generally "words"
 st.wordChars((int) '.', (int) '.');
 st.wordChars((int) '0', (int) '0');
 st.wordChars((int) '1', (int) '9');
 st.wordChars((int) ':', (int) ':');
 st.wordChars((int) '_', (int) '_');
 st.wordChars((int) '-', (int) '-');

 // It's ordinary, and returned so that we can use as a separator.  Later, it's possible to just treat as a separator to be a bit more accepting of "xxx xxx xxx" as "xxx; xxx; xxx"
 st.ordinaryChar((int) ';');

 st.wordChars((int) '(', (int) ')');
 st.wordChars((int) ',', (int) ',');
 st.wordChars((int) '#', (int) '#');

 st.eolIsSignificant(false);

 //newline=true;
}


public void run()
{
  if (0 != yyparse())
    try
    {
        /* if the parse is incomplete, drain the channel */
        while (java.io.StreamTokenizer.TT_EOF != st.nextToken()) ;
    }
    catch (IOException e) { debug(getClass().getName()+" I.O Error: "+e.getMessage()); }
}

public void setDebug(boolean debug) { yydebug=debug; }

public DeviceAliasParser(InputStream in, boolean debugMe) { super(in, debugMe); }
public DeviceAliasParser(java.util.Properties in) { super(in); }


public static void main(String args[])
{
    String p = System.getProperties().getProperty("debug.yystate");

    DeviceAliasParser aszp = new DeviceAliasParser(System.in, (null != p) && ((p.equalsIgnoreCase("DeviceAliasParser")) || (p.equalsIgnoreCase("true"))));
    aszp.testSummary(args);
}
