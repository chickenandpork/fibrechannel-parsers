/* http://byaccj.sourceforge.net */
%{
import java.lang.Math;
//import java.util.StringTokenizer;
import java.io.*;
%}

/* YACC Declarations */
%token DEVICEALIAS
%token NAME
%token PWWN
%token ALPHANUM

/* Grammar follows */
%%
input: /* empty string */
 | input '\n'
 | input effectiveLine
 ;

lineContent: /* empty */
 | lineContent ALPHANUM
 | lineContent effectiveLine
 ;

/*
 * device-alias name TESTSERVER0_0a pwwn 10:00:00:00:c9:12:34:56
 * device-alias name TESTSERVER1_0a pwwn 10:00:00:00:c9:12:34:57
 * device-alias name TESTSERVER2_0a pwwn 10:00:00:00:c9:12:34:58
 * device-alias name TESTSERVER0_0c pwwn 10:00:00:00:c9:12:34:59
 */

effectiveLine: DEVICEALIAS NAME ALPHANUM PWWN ALPHANUM { addAlias ($3, $5); }
 ;

%%

    String ins;
    java.io.StreamTokenizer st;
    boolean zpquiet = true;

    void yyerror(String s)
    {
        if (!zpquiet) System.out.println("parser error: "+s);
    }

    boolean verboseStringtokenizer = checkProperty("debug.verboseTokenizer");
    boolean newline = true;

    int yylex()
    {
        String s;
        int tok;
        Double d;

	try {
        tok = st.nextToken();
	} catch (java.io.IOException ioe) { return 0; }
	if (verboseStringtokenizer) System.out.println("token#: "+tok+": status: "+st.toString());
	switch(tok)
	{
	    case java.io.StreamTokenizer.TT_EOF:
//System.out.println("returning java.io.StreamTokenizer.TT_EOF");
            if (!newline)
            {
                newline=true;
		st.pushBack();
		if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_EOL in lieu of TT_EOF");
                return '\n'; //So we look like classic YACC example
            }
            else
                return 0;
	
	    case java.io.StreamTokenizer.TT_EOL:
		if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_EOL");
                newline=true;
		return '\n';

	    case java.io.StreamTokenizer.TT_WORD:
	        if (st.sval.equalsIgnoreCase("device-alias"))
		{
		    if (!newline)
		    {
			newline=true;
			st.pushBack();
		        if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_EOL in lieu of TT_WORD:DEVICEALIAS \"" + st.sval + "\"");
			return '\n';
		    }
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:DEVICEALIAS \"" + st.sval + "\"");
		    return DEVICEALIAS;
		}
	        else if (st.sval.equalsIgnoreCase("name"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:NAME \"" + st.sval + "\"");
		    return NAME;
		}
	        else if (st.sval.equalsIgnoreCase("pwwn"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:PWWN \"" + st.sval + "\"");
		    return PWWN;
		}
		if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:ALPHANUM \"" + st.sval + "\"");
		yylval = new ZoneParserVal(st.sval);
		return ALPHANUM;

	    case java.io.StreamTokenizer.TT_NUMBER:
	        if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_NUMBER \"" + st.sval + "\" as \"" + st.nval + "\"");
		yylval = new ZoneParserVal(st.nval);
		return ALPHANUM;

	    case ':':
	    case ';':
	        if (verboseStringtokenizer) System.out.println("returning anticipated char "+ tok + " \"" + (char) tok + "\"");
		return tok;
	}

	// bogusity
	if (verboseStringtokenizer) System.out.println("returning bogus char "+ tok + " \"" + (char) tok + "\"");
	return '\n';
    }


public void parse()
{
 try
 {
 yyparse();
 }
 catch (Exception e)
 {
 }
}


public void setReader(Reader in)
{
  //nothing to do
 st = new java.io.StreamTokenizer(in);
 // reset the parser to effect a parseNumbers(false) which doesn't exist
 st.resetSyntax();
 st.wordChars('a', 'z');
 st.wordChars('A', 'Z');
 st.wordChars(128 + 32, 255);
 st.whitespaceChars(0, ' ');
 st.commentChar('/');
 st.quoteChar('"');
 st.quoteChar('\'');

 // ok, dots, numbers, things accepted as WWNs or names are generally "words"
 st.wordChars((int) '.', (int) '.');
 st.wordChars((int) '0', (int) '0');
 st.wordChars((int) '1', (int) '9');
 st.wordChars((int) ':', (int) ':');
 st.wordChars((int) '_', (int) '_');
 st.wordChars((int) '-', (int) '-');

 // It's ordinary, and returned so that we can use as a separator.  Later, it's possible to just treat as a separator to be a bit more accepting of "xxx xxx xxx" as "xxx; xxx; xxx"
 st.ordinaryChar((int) ';');

 //st.ordinaryChar((int) ':');
 st.eolIsSignificant(true);

 //newline=true;
}


public void run()
{
  if (0 != yyparse())
    try
    {
        /* if the parse is incomplete, drain the channel */
        while (java.io.StreamTokenizer.TT_EOF != st.nextToken()) ;
    }
    catch (IOException e) { debug(getClass().getName()+" I.O Error: "+e.getMessage()); }
}

public void setDebug(boolean debug) { yydebug=debug; }

public DeviceAliasParser(InputStream in, boolean debugMe) { super(in, debugMe); }
public DeviceAliasParser(java.util.Properties in, boolean debugMe) { super(in, debugMe); }


public static void main(String args[])
{
 DeviceAliasParser aszp = new DeviceAliasParser(System.in,false);
 aszp.parse();
 System.out.println("zonefile (main) parsed " + aszp.zoneSize() + " zones, " + aszp.aliasSize() + " aliases");
}
