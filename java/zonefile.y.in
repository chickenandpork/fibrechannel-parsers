%{
import java.lang.Math;
import java.io.*;

/**
 * @page formats Compatible File Formats
 * @subpage AliShowZoneParser
 *
 * @page AliShowZoneParser Brocade "alishow" and "zoneshow"
 *
 * The AliShowZoneParser parses the output of a Brocade SAN switch with the "alishow" or "zoneshow" commands.
 *
 * As always, this parser is more successful when the content is treated like
 * binary: don't edit it.  In particular, the use of a putty log to capture output
 * while querying the switch leads to parser exceptions because the interactive
 * "you have connected to blah blah system version 1.2.3, the weather is fabulous
 * and I have 42 pages of boilerplate to spit out before you enter the command for
 * aliases... hit enter to continue... have some backspaces..." is included.  As
 * are the backspaces.
 *
 * When collecting aliases using an ssh command, it's better to execute that command noninteractively:
 *
 * In UNIX, Linux, Ubuntu, OSX, or the 6000 other licensees of the USL codebase:
 *
 *     ssh username@switch44.example.com "alishow" > switch44.alishow
 *
 * In windows, using the <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">putty</a> tools:
 *
 *     plink.exe -l username -pw p4ssw0rd switch44.example.com "alishow" > switch44.alishow
 *
 * This leads to a better chance to parse 100% of the output with more accuracy,
 * but I guess following this recommendation is up to the user, and to the engineer
 * suggesting how he or she should collect the text for parsing.
 * 
 * @verbatim
Defined configuration:
 cfg:   SAN_CFG_B
                SANASVR001_FabA; SANASVR002_FabA; SANASVR003_FabA;
                SANASVR004_FabA
 alias: HDS0123457_CL3E
                50:06:0e:80:12:34:57:24
 alias: HDS0123457_CL3F
                50:06:0e:80:12:34:57:25
 alias: HDS0123457_CL5E
                50:06:0e:80:12:34:57:44
 alias: HDS0123457_CL5F
                50:06:0e:80:12:34:57:45
 alias: HDS0123457_CL7E
                50:06:0e:80:12:34:57:64
 alias: HDS0123457_CL7F
                50:06:0e:80:12:34:57:65
 alias: Oracle_123466
                10:00:00:00:c9:12:34:66
 alias: Oracle_123467
                10:00:00:00:c9:12:34:67
 alias: NASHead_123468
                10:00:00:00:c9:12:34:68
 alias: NASHead_123469
                10:00:00:00:c9:12:34:69
 alias: NASMany_654321
                10:00:00:00:c9:44:44:10; 10:00:00:00:c9:44:44:11
                10:00:00:00:c9:44:44:20; 10:00:00:00:c9:44:44:21
                10:00:00:00:c9:44:44:30; 10:00:00:00:c9:44:44:31

Effective configuration:
 cfg:   SAN_CFG_B
 zone:  SANASVR001_FabA
                10:00:00:00:c9:12:34:66 @endverbatim
 *
 * The result is a list of nicknames, such as:
 *
 * @verbatim
50060e8012345724,HDS0123457_CL3E
50060e8012345725,"HDS0123457_CL3F"
50060e8012345744,"HDS0123457_CL5E"
50060e8012345745,"HDS0123457_CL5F"
50060e8012345764,"HDS0123457_CL7E"
50060e8012345765,"HDS0123457_CL7F"
10000000c9123466,"Oracle_123466"
10000000c9123467,"Oracle_123467"
10000000c9123468,"NASHead_123468"
10000000c9123469,"NASHead_123469"
10000000c9444410,"NASMany_654321"
10000000c9444411,"NASMany_654321"
10000000c9444420,"NASMany_654321"
10000000c9444421,"NASMany_654321"
10000000c9444430,"NASMany_654321"
10000000c9444431,"NASMany_654321" @endverbatim
 */


%}

/* YACC Declarations */
%token ZONE
%token ALIAS
%token ALIZONESHOWCOMMAND
%token ALPHANUM
%token DEFINED
%token EFFECTIVE
%token CONFIGURATION
%token CFG
%token HARDZONE
%token H
%token OPENPAREN
%token CLOSEPAREN

/* Grammar follows */
%%
input: /* empty string */
 | input preamble
 | input DEFINED CONFIGURATION sectionDefined
 | input EFFECTIVE CONFIGURATION sectionEffective
 | input sectionEffective
 ;

preamble: alphanumstream '>' ALIZONESHOWCOMMAND
 ;

alphanumstream: /* empty */
 | alphanumstream ALPHANUM { $$ = $1; }
 ;

sectionEffective: /* empty */
 | sectionEffective effectiveLine
 ;

sectionDefined: /* empty */
 | sectionDefined effectiveLine
 ;

/*
 * zone:  A10_IBM_V7000
 *                A10; IBM_V7000_C1P1; IBM_V7000_C2P1
 * zone:  A11_EMC_CX4_960
 *                A11; EMC_CX4_
 */

effectiveLine: itemlist {}
 | CFG itemlist {}
 | ZONE ALPHANUM itemlist { addZone ($2, $3); }
 | ALIAS ALPHANUM itemlist { addAlias ($2, $3); }
 ;

itemlist: ALPHANUM { $$ = $1; }
 | ';' itemlist { $$ = $2; }
 | HARDZONE itemlist { $$ = $2; }
 | HARDZONE { } ;
 | ALPHANUM itemlist { $$ = appendZoneAlphanum($2, $1); }
 | H OPENPAREN ALPHANUM CLOSEPAREN { $$ = $3; }
 | H OPENPAREN ALPHANUM CLOSEPAREN itemlist { $$ = appendZoneAlphanum($5, $3); }
 ;
%%

    String ins;
    java.io.StreamTokenizer st;
    boolean zpquiet = true;

    void yyerror(String s)
    {
        if (!zpquiet) System.out.println("parser error: "+s);
    }

    boolean verboseStringtokenizer = checkProperty("debug.verboseTokenizer");
    boolean moreVerboseStringtokenizer = checkProperty("debug.moreVerboseTokenizer");
    String manualPushBackALPHANUM = null;

    int yylex()
    {
        String s;
        int tok;
        Double d;
//System.out.print("yylex ");
	if (null != manualPushBackALPHANUM)
	{
	    st.sval = manualPushBackALPHANUM;
	    //if (verboseStringtokenizer) System.out.println("token#: "+java.io.StreamTokenizer.TT_WORD);
	    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:ALPHANUM \"" + st.sval + "\"");
	    manualPushBackALPHANUM = null;
	    return ALPHANUM;
	}
	/* else */

	try {
        tok = st.nextToken();
	} catch (java.io.IOException ioe) { return -1; }
	//if (verboseStringtokenizer) System.out.println("token#: "+tok);
	switch(tok)
	{
	    case java.io.StreamTokenizer.TT_EOF:
                return 0;
	
	    case java.io.StreamTokenizer.TT_WORD:
	        if (moreVerboseStringtokenizer) System.out.println("checking java.io.StreamTokenizer.TT_WORD:ALPHANUM \"" + st.sval + "\"");
	        if (st.sval.equalsIgnoreCase("zone:"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:ZONE \"" + st.sval + "\"");
		    return ZONE;
		}
	        if (st.sval.equalsIgnoreCase("alias:"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:ALIAS \"" + st.sval + "\"");
		    return ALIAS;
		}
	        if ( (st.sval.equalsIgnoreCase("alishow")) || (st.sval.equalsIgnoreCase("zoneshow")) )
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:ALISHOW/ZONESHOW COMMAND \"" + st.sval + "\"");
		    return ALIZONESHOWCOMMAND;
		}
	        if (st.sval.equalsIgnoreCase("cfg:"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:CFG \"" + st.sval + "\"");
		    return CFG;
		}
	        if (st.sval.toLowerCase().startsWith("cfg:"))
		{
		    manualPushBackALPHANUM = st.sval.substring(4);
		    st.sval = "cfg:";
		    if (verboseStringtokenizer) System.out.println("returning (manual pushBack: "+manualPushBackALPHANUM+") java.io.StreamTokenizer.TT_WORD:CFG \"" + st.sval + "\"");
		    return CFG;
		}
	        if (st.sval.equalsIgnoreCase("effective"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:EFFECTIVE \"" + st.sval + "\"");
		    return EFFECTIVE;
		}
	        if (st.sval.equalsIgnoreCase("defined"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:DEFINED \"" + st.sval + "\"");
		    return DEFINED;
		}
	        if (st.sval.equalsIgnoreCase("configuration:"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:CONFIGURATION \"" + st.sval + "\"");
		    return CONFIGURATION;
		}
	        if (st.sval.equalsIgnoreCase("h"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:H \"" + st.sval + "\"");
		    return H;
		}
	        if (st.sval.matches("[0-9]+,[0-9]+"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:HARDZone \"" + st.sval + "\"");
		    return HARDZONE;
		}
		if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:ALPHANUM \"" + st.sval + "\"");
		yylval = new ZoneParserVal(st.sval);
		return ALPHANUM;

	    case java.io.StreamTokenizer.TT_NUMBER:
	        if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_NUMBER \"" + st.sval + "\" as \"" + st.nval + "\"");
		yylval = new ZoneParserVal(st.nval);
		return ALPHANUM;

	    case '{':
		return OPENPAREN;
	    case '}':
		return CLOSEPAREN;

	    case ':':
	    case ';':
	    case '>':
	        if (verboseStringtokenizer) System.out.println("returning anticipated char "+ tok + " \"" + (char) tok + "\"");
		return tok;
	}

	// bogusity
	if (verboseStringtokenizer) System.out.println("returning bogus char "+ tok + " \"" + (char) tok + "\"");
	return '\n';
    }


public void parse()
{
 try
 {
 yyparse();
 }
 catch (Exception e)
 {
 }
}


public void setReader(Reader in)
{
  //nothing to do
 st = new java.io.StreamTokenizer(in);
 // reset the parser to effect a parseNumbers(false) which doesn't exist
 st.resetSyntax();
 st.wordChars('a', 'z');
 st.wordChars('A', 'Z');
 st.wordChars(128 + 32, 255);
 st.whitespaceChars(0, ' ');
 st.commentChar('/');
 st.quoteChar('"');
 st.quoteChar('\'');

 // ok, dots, numbers, things accepted as WWNs or names are generally "words"
 st.wordChars((int) '.', (int) '.');
 st.wordChars((int) '0', (int) '0');
 st.wordChars((int) '1', (int) '9');
 st.wordChars((int) ':', (int) ':');
 st.wordChars((int) ',', (int) ',');
 st.wordChars((int) '_', (int) '_');

 // It's ordinary, and returned so that we can use as a separator.  Later, it's possible to just treat as a separator to be a bit more accepting of "xxx xxx xxx" as "xxx; xxx; xxx"
 st.ordinaryChar((int) ';');

 st.ordinaryChar((int) '{');
 st.ordinaryChar((int) '}');

 st.eolIsSignificant(false);

}


public void run()
{
  if (checkProperty("debug.debugTokenizer")) setDebug(true);

  if (0 != yyparse())
    try
    {
	/* if the parse is incomplete, drain the channel */
	while (java.io.StreamTokenizer.TT_EOF != st.nextToken()) ;
    }
    catch (IOException e) { debug(getClass().getName()+" I.O Error: "+e.getMessage()); }
}

public void setDebug(boolean debug) { yydebug=debug; }

public AliShowZoneParser(InputStream in, boolean debugMe) { super(in, debugMe); }

public AliShowZoneParser(java.util.Properties in) { super(in); }

public static void main(String args[])
{
    String p = System.getProperties().getProperty("debug.yystate");

    AliShowZoneParser aszp = new AliShowZoneParser(System.in, (null != p) && ((p.equalsIgnoreCase("AliShowZoneParser")) || (p.equalsIgnoreCase("true"))));
    aszp.testSummary(args);
}
