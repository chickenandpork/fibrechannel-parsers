/* http://byaccj.sourceforge.net */
%{
import java.lang.Math;
//import java.util.StringTokenizer;
import java.io.*;
%}

/* YACC Declarations */
%token ZONE
%token ALIAS
%token ALPHANUM
%token DEFINED
%token EFFECTIVE
%token CONFIGURATION
%token CFG
%token HARDZONE

/* Grammar follows */
%%
input: /* empty string */
 | input DEFINED CONFIGURATION sectionDefined
 | input EFFECTIVE CONFIGURATION sectionEffective
 | input sectionEffective
 ;

sectionEffective: /* empty */
 | sectionEffective effectiveLine
 ;

sectionDefined: /* empty */
 | sectionDefined effectiveLine
 ;

/*
 * zone:  A10_IBM_V7000
 *                A10; IBM_V7000_C1P1; IBM_V7000_C2P1
 * zone:  A11_EMC_CX4_960
 *                A11; EMC_CX4_
 */

effectiveLine: itemlist {}
 | CFG itemlist {}
 | ZONE ALPHANUM itemlist { addZone ($2, $3); }
 | ALIAS ALPHANUM itemlist { addAlias ($2, $3); }
 ;

itemlist: ALPHANUM { $$ = $1; }
 | ';' itemlist { $$ = $2; }
 | HARDZONE itemlist { $$ = $2; }
 | HARDZONE { } ;
 | ALPHANUM itemlist { $$ = appendZoneAlphanum($2, $1); }
 ;
%%

    java.util.Vector<ZPZoneEntry> zones = new java.util.Vector();
    java.util.Vector<ZPAliasEntry> aliases = new java.util.Vector();

    String ins;
    java.io.StreamTokenizer st;
    boolean zpquiet = true;

    void yyerror(String s)
    {
        if (!zpquiet) System.out.println("parser error: "+s);
    }

    boolean verboseStringtokenizer = checkProperty("debug.verboseTokenizer");
    boolean moreVerboseStringtokenizer = checkProperty("debug.moreVerboseTokenizer");
    String manualPushBackALPHANUM = null;

    int yylex()
    {
        String s;
        int tok;
        Double d;
//System.out.print("yylex ");
	if (null != manualPushBackALPHANUM)
	{
	    st.sval = manualPushBackALPHANUM;
	    //if (verboseStringtokenizer) System.out.println("token#: "+java.io.StreamTokenizer.TT_WORD);
	    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:ALPHANUM \"" + st.sval + "\"");
	    manualPushBackALPHANUM = null;
	    return ALPHANUM;
	}
	/* else */

	try {
        tok = st.nextToken();
	} catch (java.io.IOException ioe) { return -1; }
	//if (verboseStringtokenizer) System.out.println("token#: "+tok);
	switch(tok)
	{
	    case java.io.StreamTokenizer.TT_EOF:
                return 0;
	
	    case java.io.StreamTokenizer.TT_WORD:
	        if (moreVerboseStringtokenizer) System.out.println("checking java.io.StreamTokenizer.TT_WORD:ALPHANUM \"" + st.sval + "\"");
	        if (st.sval.equalsIgnoreCase("zone:"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:ZONE \"" + st.sval + "\"");
		    return ZONE;
		}
	        if (st.sval.equalsIgnoreCase("alias:"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:ALIAS \"" + st.sval + "\"");
		    return ALIAS;
		}
	        if (st.sval.equalsIgnoreCase("cfg:"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:CFG \"" + st.sval + "\"");
		    return CFG;
		}
	        if (st.sval.toLowerCase().startsWith("cfg:"))
		{
		    manualPushBackALPHANUM = st.sval.substring(4);
		    st.sval = "cfg:";
		    if (verboseStringtokenizer) System.out.println("returning (manual pushBack: "+manualPushBackALPHANUM+") java.io.StreamTokenizer.TT_WORD:CFG \"" + st.sval + "\"");
		    return CFG;
		}
	        if (st.sval.equalsIgnoreCase("effective"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:EFFECTIVE \"" + st.sval + "\"");
		    return EFFECTIVE;
		}
	        if (st.sval.equalsIgnoreCase("defined"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:DEFINED \"" + st.sval + "\"");
		    return DEFINED;
		}
	        if (st.sval.equalsIgnoreCase("configuration:"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:CONFIGURATION \"" + st.sval + "\"");
		    return CONFIGURATION;
		}
	        if (st.sval.matches("[0-9]+,[0-9]+"))
		{
		    if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:HARDZone \"" + st.sval + "\"");
		    return HARDZONE;
		}
		if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_WORD:ALPHANUM \"" + st.sval + "\"");
		yylval = new AliShowZoneParserVal(st.sval);
		return ALPHANUM;

	    case java.io.StreamTokenizer.TT_NUMBER:
	        if (verboseStringtokenizer) System.out.println("returning java.io.StreamTokenizer.TT_NUMBER \"" + st.sval + "\" as \"" + st.nval + "\"");
		yylval = new AliShowZoneParserVal(st.nval);
		return ALPHANUM;

	    case ':':
	    case ';':
	        if (verboseStringtokenizer) System.out.println("returning anticipated char "+ tok + " \"" + (char) tok + "\"");
		return tok;
	}

	// bogusity
	if (verboseStringtokenizer) System.out.println("returning bogus char "+ tok + " \"" + (char) tok + "\"");
	return '\n';
    }


public void parse()
{
 try
 {
 yyparse();
 }
 catch (Exception e)
 {
 }
}

void addZone(AliShowZoneParserVal name, AliShowZoneParserVal list)
{
if (checkProperty("debug.verboseAddZone"))
{
System.out.println(" ZZone: " + name.sval + " -- xx");
System.out.println("name.sval: " + (null == name.sval ? "NULL" : name.sval));
System.out.println("name.obj: " + (null == name.obj ? "NULL" : name.obj.getClass().getName()));
System.out.println("list.sval: " + (null == list.sval ? "NULL" : list.sval));
System.out.println("list.obj: " + (null == list.obj ? "NULL" : list.obj.getClass().getName()));
}

    if (null != list.sval)
	addZone (name.sval, list.sval);
    else if (list.obj.getClass() == java.util.Vector.class)
	addZone (name.sval, (java.util.Vector<AliShowZoneParserVal>) list.obj);
    else if (list.obj.getClass() == AliShowZoneParserVal.class)
	addZone (name, (AliShowZoneParserVal)list.obj);
}
void addAlias(AliShowZoneParserVal name, AliShowZoneParserVal list)
{
    if (null != list.sval)
	addAlias (name.sval, list.sval);
    else if (list.obj.getClass() == java.util.Vector.class)
	addAlias (name.sval, (java.util.Vector<AliShowZoneParserVal>) list.obj);
    else if (list.obj.getClass() == AliShowZoneParserVal.class)
	addAlias (name, (AliShowZoneParserVal)list.obj);
}

void addZone(String name, String list)
{
if (checkProperty("debug.verboseAddZone"))
{
System.out.println("name: " + (null == name ? "NULL" : name));
System.out.println("list: " + (null == list ? "NULL" : list));
}
    zones.add(new ZPZoneEntry (name,list));
}

void addZone(String name, java.util.Vector<AliShowZoneParserVal> list)
{
    ZPZoneEntry ze = new ZPZoneEntry (name);
    for (java.util.Enumeration<AliShowZoneParserVal> e = list.elements(); e.hasMoreElements();)
    {
       ze.addZone(e.nextElement().sval);
    }

    zones.add(ze);
 }
void addAlias(String name, String list)
{
    aliases.add(new ZPAliasEntry (name,list));
}

void addAlias(String name, java.util.Vector<AliShowZoneParserVal> list)
{
    ZPAliasEntry ze = new ZPAliasEntry (name);
    for (java.util.Enumeration<AliShowZoneParserVal> e = list.elements(); e.hasMoreElements();)
    {
       ze.addAlias(e.nextElement().sval);
    }

    aliases.add(ze);
 }

AliShowZoneParserVal appendZoneAlphanum(AliShowZoneParserVal list, AliShowZoneParserVal item)
{
if (checkProperty("debug.verboseAppendZone"))
{
System.out.println("append: list.sval: " + (null == list.sval ? "NULL" : list.sval));
System.out.println("append: list.obj: " + (null == list.obj ? "NULL" : list.obj.getClass().getName()));
System.out.println("append: item.sval: " + (null == item.sval ? "NULL" : item.sval));
System.out.println("append: item.obj: " + (null == item.obj ? "NULL" : item.obj.getClass().getName()));
}
    if ( (null != list.obj)  && (list.obj.getClass().getName().equals(java.util.Vector.class.getName())) )
    {
	((java.util.Vector) list.obj).add(item);
	return list;
    }
    else 
    {
	java.util.Vector<AliShowZoneParserVal> li = new java.util.Vector(2,2);
	AliShowZoneParserVal retNewList = new AliShowZoneParserVal(li);
	li.add(list);
	li.add(item);
	return retNewList;
    }
}


public void setReader(Reader in)
{
  //nothing to do
 st = new java.io.StreamTokenizer(in);
 // reset the parser to effect a parseNumbers(false) which doesn't exist
 st.resetSyntax();
 st.wordChars('a', 'z');
 st.wordChars('A', 'Z');
 st.wordChars(128 + 32, 255);
 st.whitespaceChars(0, ' ');
 st.commentChar('/');
 st.quoteChar('"');
 st.quoteChar('\'');

 // ok, dots, numbers, things accepted as WWNs or names are generally "words"
 st.wordChars((int) '.', (int) '.');
 st.wordChars((int) '0', (int) '0');
 st.wordChars((int) '1', (int) '9');
 st.wordChars((int) ':', (int) ':');
 st.wordChars((int) ',', (int) ',');
 st.wordChars((int) '_', (int) '_');

 // It's ordinary, and returned so that we can use as a separator.  Later, it's possible to just treat as a separator to be a bit more accepting of "xxx xxx xxx" as "xxx; xxx; xxx"
 st.ordinaryChar((int) ';');

 //st.ordinaryChar((int) ':');
 st.eolIsSignificant(false);

}


public void run()
{
  if (checkProperty("debug.debugTokenizer")) setDebug(true);

  if (0 != yyparse())
    try
    {
	/* if the parse is incomplete, drain the channel */
	while (java.io.StreamTokenizer.TT_EOF != st.nextToken()) ;
    }
    catch (IOException e) { debug(getClass().getName()+" I.O Error: "+e.getMessage()); }
}

public void setDebug(boolean debug) { yydebug=debug; }

public AliShowZoneParser(InputStream in, boolean debugMe) { super(in, debugMe); }

public AliShowZoneParser(java.util.Properties in, boolean debugMe) { super(in, debugMe); }

public java.util.Enumeration<ZPZoneEntry> zoneElements() { return zones.elements(); }
public int zoneSize() { return zones.size(); }
public java.util.Enumeration<ZPAliasEntry> aliasElements() { return aliases.elements(); }
public ZPAliasEntry[] aliasArray() { return aliases.toArray(new ZPAliasEntry[1]); }
public int aliasSize() { return aliases.size(); }
public ZPAliasEntry[] aliases() { return (ZPAliasEntry[]) aliases.toArray(); }


public static void main(String args[])
{
 AliShowZoneParser aszp = new AliShowZoneParser(System.in, false);

 aszp.testSummary(args);
}
